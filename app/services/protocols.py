# app/services/protocols.py
from __future__ import annotations
from typing import Protocol, Iterable, AsyncIterator, Dict, Any, Optional, List, Tuple

class FireSource(Protocol):
    """Contrato do serviço que coleta dados do servidor (WFS/INPE)."""
    # async def iter_48h(self, page_size: int = 1000) -> AsyncIterator[Dict[str, Any]]:
    #     ...
    async def iter_48h(self) -> AsyncIterator[Dict[str, Any]]:
        ...
    async def iter_range(self, start: str, end: str) -> AsyncIterator[Dict[str, Any]]:
        ...

class Repository(Protocol):
    """Contrato do repositório (persistência em Mongo)."""
    async def upsert_many(self, docs: Iterable[Dict[str, Any]]) -> int: ...
    async def count(self, flt: Optional[Dict[str, Any]] = None) -> int: ...
    async def recent(self, limit: int) -> list[Dict[str, Any]]: ...
    async def find(self, flt: Dict[str, Any], limit: int, skip: int, sort: list[tuple[str, int]]) -> list[Dict[str, Any]]: ...
    async def agg_stats(self) -> Dict[str, Any]: ...
    async def find_one_sorted(self, query: Dict[str, Any], sort: List[Tuple[str, int]], projection: Optional[Dict[str, Any]] = None) -> Optional[Dict[str, Any]]: ...
